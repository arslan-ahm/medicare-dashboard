generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Doctor {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  password       String
  specialization String
  createdAt      DateTime @default(now())

  organization String?

  patients      Patient[]
  appointments  Appointment[]
  tasks         Task[]
  notifications Notification[]
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  date        DateTime
  status      Boolean
  doctorId    String   @db.ObjectId
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
}

model Patient {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  forename            String
  surname             String?
  image               String?
  dateOfBirth         DateTime
  gender              Gender
  diagnosis           String
  status              PatientStatus
  notes               String?
  upcomingAppointment DateTime
  doctorId            String        @db.ObjectId
  doctor              Doctor        @relation(fields: [doctorId], references: [id])

  lastAppointments Appointment[] @relation(name: "LastAppointment")

  createdAt DateTime @default(now())
}

model Appointment {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  patientName String
  start_time  String
  duration    Int
  purpose     String
  type        AppointmentType
  status      AppointmentStatus
  isOnline    Boolean
  doctorId    String            @db.ObjectId
  doctor      Doctor            @relation(fields: [doctorId], references: [id])

  asLastAppointment Patient? @relation(name: "LastAppointment", fields: [id], references: [id])

  createdAt DateTime @default(now())
}

model Notification {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  text     String
  isRead   Boolean  @default(false)
  time     DateTime @default(now())
  doctorId String   @db.ObjectId
  doctor   Doctor   @relation(fields: [doctorId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentType {
  FIRST_TIME
  FOLLOW_UP
  SURGERY
}

enum AppointmentStatus {
  NOT_CONFIRMED
  CONFIRMED
}

enum PatientStatus {
  RECOVERED
  AWAITING_SURGERY
  ON_TREATMENT
  OTHER
}
